{"ast":null,"code":"import{Reanimated}from\"./reanimatedWrapper\";import{State}from\"../../State\";export var GestureStateManager={create:function create(handlerTag){'worklet';return{begin:function begin(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.BEGAN);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}},activate:function activate(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.ACTIVE);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}},fail:function fail(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.FAILED);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}},end:function end(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.END);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}};}};","map":{"version":3,"sources":["gestureStateManager.ts"],"names":["GestureStateManager","create","begin","Reanimated","State","console","activate","fail","end"],"mappings":"AAAA,OAAA,UAAA,2BACA,OAAA,KAAA,mBASA,MAAO,IAAMA,CAAAA,mBAAmB,CAAG,CACjCC,MADiC,iBAC3B,UAD2B,CACmB,CAClD,UACA,MAAO,CACLC,KAAK,CAAE,gBAAM,CACX,UACA,GAAA,UAAA,CAAgB,CACdC,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,CAAuCC,KAAK,CAA5CD,KAAAA,EADF,CAAA,IAEO,CACLE,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA,EAGD,CATE,CAAA,CAYLC,QAAQ,CAAE,mBAAM,CACd,UACA,GAAA,UAAA,CAAgB,CACdH,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,CAAuCC,KAAK,CAA5CD,MAAAA,EADF,CAAA,IAEO,CACLE,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA,EAGD,CApBE,CAAA,CAuBLE,IAAI,CAAE,eAAM,CACV,UACA,GAAA,UAAA,CAAgB,CACdJ,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,CAAuCC,KAAK,CAA5CD,MAAAA,EADF,CAAA,IAEO,CACLE,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA,EAGD,CA/BE,CAAA,CAkCLG,GAAG,CAAE,cAAM,CACT,UACA,GAAA,UAAA,CAAgB,CACdL,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,CAAuCC,KAAK,CAA5CD,GAAAA,EADF,CAAA,IAEO,CACLE,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA,EAGD,CACF,CA3CI,CAAP,CA6CD,CAhDgC,CAA5B","sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}