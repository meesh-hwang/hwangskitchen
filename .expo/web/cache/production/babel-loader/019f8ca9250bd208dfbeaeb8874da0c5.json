{"ast":null,"code":"var getArea=function getArea(a,b){return a*b;};var getPointDistance=function getPointDistance(a,b){return Math.sqrt(Math.pow(a[0]-b[0],2)+Math.pow(a[1]-b[1],2));};export var getElementVisibleWidth=function getElementVisibleWidth(elementWidth,xOffset,ScreenWidth){if(xOffset>=0){return xOffset+elementWidth<=ScreenWidth?elementWidth:ScreenWidth-xOffset;}return elementWidth-xOffset;};var getTooltipCoordinate=function getTooltipCoordinate(x,y,width,height,ScreenWidth,ScreenHeight,tooltipWidth,tooltipHeight,withPointer){var center=[x+getElementVisibleWidth(width,x,ScreenWidth)/2,y+height/2];var pOne=[center[0],0];var pTwo=[ScreenWidth,center[1]];var pThree=[center[0],ScreenHeight];var pFour=[0,center[1]];var vOne=getPointDistance(center,pOne);var vTwo=getPointDistance(center,pTwo);var vThree=getPointDistance(center,pThree);var vFour=getPointDistance(center,pFour);var areas=[getArea(vOne,vFour),getArea(vOne,vTwo),getArea(vTwo,vThree),getArea(vThree,vFour)].map(function(each,index){return{area:each,id:index};});var sortedArea=areas.sort(function(a,b){return b.area-a.area;});var dX=0.001;var dY=height/2;var directionCorrection=[[-1,-1],[1,-1],[1,1],[-1,1]];var deslocateReferencePoint=[[-tooltipWidth,-tooltipHeight],[0,-tooltipHeight],[0,0],[-tooltipWidth,0]];var qIndex=sortedArea[0].id;var getWithPointerOffsetY=function getWithPointerOffsetY(){return withPointer?10*directionCorrection[qIndex][1]:0;};var getWithPointerOffsetX=function getWithPointerOffsetX(){return withPointer?center[0]-18*directionCorrection[qIndex][0]:center[0];};var newX=getWithPointerOffsetX()+(dX*directionCorrection[qIndex][0]+deslocateReferencePoint[qIndex][0]);return{x:constraintX(newX,qIndex,center[0],ScreenWidth,tooltipWidth),y:center[1]+(dY*directionCorrection[qIndex][1]+deslocateReferencePoint[qIndex][1])+getWithPointerOffsetY()};};var constraintX=function constraintX(newX,qIndex,x,ScreenWidth,tooltipWidth){switch(qIndex){case 0:case 3:{var maxWidth=newX>ScreenWidth?ScreenWidth-10:newX;return newX<1?10:maxWidth;}case 1:case 2:{var leftOverSpace=ScreenWidth-newX;return leftOverSpace>=tooltipWidth?newX:newX-(tooltipWidth-leftOverSpace+10);}default:{return 0;}}};export default getTooltipCoordinate;","map":{"version":3,"sources":["C:/Users/miche/Desktop/hwangskitchen/node_modules/react-native-elements/dist/tooltip/getTooltipCoordinate.js"],"names":["getArea","a","b","getPointDistance","Math","sqrt","pow","getElementVisibleWidth","elementWidth","xOffset","ScreenWidth","getTooltipCoordinate","x","y","width","height","ScreenHeight","tooltipWidth","tooltipHeight","withPointer","center","pOne","pTwo","pThree","pFour","vOne","vTwo","vThree","vFour","areas","map","each","index","area","id","sortedArea","sort","dX","dY","directionCorrection","deslocateReferencePoint","qIndex","getWithPointerOffsetY","getWithPointerOffsetX","newX","constraintX","maxWidth","leftOverSpace"],"mappings":"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","sourcesContent":["const getArea = (a, b) => a * b;\nconst getPointDistance = (a, b) => Math.sqrt(Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2));\nexport const getElementVisibleWidth = (elementWidth, xOffset, ScreenWidth) => {\n    // Element is fully visible OR scrolled right\n    if (xOffset >= 0) {\n        return xOffset + elementWidth <= ScreenWidth // is element fully visible?\n            ? elementWidth // element is fully visible;\n            : ScreenWidth - xOffset; // calculate visible width of scrolled element\n    }\n    // Element is scrolled LEFT\n    return elementWidth - xOffset; // calculate visible width of scrolled element\n};\n/*\ntype Coord = {\n  x: number,\n  y: number,\n};\n\n  ~Tooltip coordinate system:~\n  The tooltip coordinates are based on the element which it is wrapping.\n  We take the x and y coordinates of the element and find the best position\n  to place the tooltip. To find the best position we look for the side with the\n  most space. In order to find the side with the most space we divide the the\n  surroundings in four quadrants and check for the one with biggest area.\n  Once we know the quandrant with the biggest area it place the tooltip in that\n  direction.\n\n  To find the areas we first get 5 coordinate points. The center and the other 4 extreme points\n  which together make a perfect cross shape.\n\n  Once we know the coordinates we can get the length of the vertices which form each quadrant.\n  Since they are squares we only need two.\n*/\nconst getTooltipCoordinate = (x, y, width, height, ScreenWidth, ScreenHeight, tooltipWidth, tooltipHeight, withPointer) => {\n    // The following are point coordinates: [x, y]\n    const center = [\n        x + getElementVisibleWidth(width, x, ScreenWidth) / 2,\n        y + height / 2,\n    ];\n    const pOne = [center[0], 0];\n    const pTwo = [ScreenWidth, center[1]];\n    const pThree = [center[0], ScreenHeight];\n    const pFour = [0, center[1]];\n    // vertices\n    const vOne = getPointDistance(center, pOne);\n    const vTwo = getPointDistance(center, pTwo);\n    const vThree = getPointDistance(center, pThree);\n    const vFour = getPointDistance(center, pFour);\n    // Quadrant areas.\n    // type Areas = {\n    //   area: number,\n    //   id: number,\n    // };\n    const areas = [\n        getArea(vOne, vFour),\n        getArea(vOne, vTwo),\n        getArea(vTwo, vThree),\n        getArea(vThree, vFour),\n    ].map((each, index) => ({ area: each, id: index }));\n    const sortedArea = areas.sort((a, b) => b.area - a.area);\n    // deslocated points\n    const dX = 0.001;\n    const dY = height / 2;\n    // Deslocate the coordinates in the direction of the quadrant.\n    const directionCorrection = [\n        [-1, -1],\n        [1, -1],\n        [1, 1],\n        [-1, 1],\n    ];\n    const deslocateReferencePoint = [\n        [-tooltipWidth, -tooltipHeight],\n        [0, -tooltipHeight],\n        [0, 0],\n        [-tooltipWidth, 0],\n    ];\n    // current quadrant index\n    const qIndex = sortedArea[0].id;\n    const getWithPointerOffsetY = () => withPointer ? 10 * directionCorrection[qIndex][1] : 0;\n    const getWithPointerOffsetX = () => withPointer ? center[0] - 18 * directionCorrection[qIndex][0] : center[0];\n    const newX = getWithPointerOffsetX() +\n        (dX * directionCorrection[qIndex][0] + deslocateReferencePoint[qIndex][0]);\n    return {\n        x: constraintX(newX, qIndex, center[0], ScreenWidth, tooltipWidth),\n        y: center[1] +\n            (dY * directionCorrection[qIndex][1] +\n                deslocateReferencePoint[qIndex][1]) +\n            getWithPointerOffsetY(),\n    };\n};\nconst constraintX = (newX, qIndex, x, ScreenWidth, tooltipWidth) => {\n    switch (qIndex) {\n        // 0 and 3 are the left side quadrants.\n        case 0:\n        case 3: {\n            const maxWidth = newX > ScreenWidth ? ScreenWidth - 10 : newX;\n            return newX < 1 ? 10 : maxWidth;\n        }\n        // 1 and 2 are the right side quadrants\n        case 1:\n        case 2: {\n            const leftOverSpace = ScreenWidth - newX;\n            return leftOverSpace >= tooltipWidth\n                ? newX\n                : newX - (tooltipWidth - leftOverSpace + 10);\n        }\n        default: {\n            return 0;\n        }\n    }\n};\nexport default getTooltipCoordinate;\n"]},"metadata":{},"sourceType":"module"}