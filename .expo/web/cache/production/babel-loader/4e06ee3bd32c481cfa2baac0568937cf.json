{"ast":null,"code":"import{hsvToColor,RGBtoHSV,rgbaColor,processColor,red,green,blue,opacity}from\"./Colors\";import{makeMutable}from\"./core\";import{interpolate}from\"./interpolation\";import{Extrapolate}from\"../reanimated1/derived\";import{useSharedValue}from\"./hook/useSharedValue\";var interpolateColorsHSV=function interpolateColorsHSV(value,inputRange,colors){'worklet';var h=interpolate(value,inputRange,colors.h,Extrapolate.CLAMP);var s=interpolate(value,inputRange,colors.s,Extrapolate.CLAMP);var v=interpolate(value,inputRange,colors.v,Extrapolate.CLAMP);return hsvToColor(h,s,v);};var interpolateColorsRGB=function interpolateColorsRGB(value,inputRange,colors){'worklet';var r=interpolate(value,inputRange,colors.r,Extrapolate.CLAMP);var g=interpolate(value,inputRange,colors.g,Extrapolate.CLAMP);var b=interpolate(value,inputRange,colors.b,Extrapolate.CLAMP);var a=interpolate(value,inputRange,colors.a,Extrapolate.CLAMP);return rgbaColor(r,g,b,a);};var getInterpolateRGB=function getInterpolateRGB(colors){'worklet';var r=[];var g=[];var b=[];var a=[];for(var i=0;i<colors.length;++i){var color=colors[i];var proocessedColor=processColor(color);if(proocessedColor!==null&&proocessedColor!==undefined){r.push(red(proocessedColor));g.push(green(proocessedColor));b.push(blue(proocessedColor));a.push(opacity(proocessedColor));}}return{r:r,g:g,b:b,a:a};};var getInterpolateHSV=function getInterpolateHSV(colors){'worklet';var h=[];var s=[];var v=[];for(var i=0;i<colors.length;++i){var color=colors[i];var proocessedColor=RGBtoHSV(processColor(color));if(proocessedColor){h.push(proocessedColor.h);s.push(proocessedColor.s);v.push(proocessedColor.v);}}return{h:h,s:s,v:v};};export var interpolateColor=function interpolateColor(value,inputRange,outputRange){'worklet';var colorSpace=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'RGB';if(colorSpace==='HSV'){return interpolateColorsHSV(value,inputRange,getInterpolateHSV(outputRange));}else if(colorSpace==='RGB'){return interpolateColorsRGB(value,inputRange,getInterpolateRGB(outputRange));}throw new Error(\"Invalid color space provided: \"+colorSpace+\". Supported values are: ['RGB', 'HSV']\");};export var ColorSpace;(function(ColorSpace){ColorSpace[ColorSpace[\"RGB\"]=0]=\"RGB\";ColorSpace[ColorSpace[\"HSV\"]=1]=\"HSV\";})(ColorSpace||(ColorSpace={}));export function useInterpolateConfig(inputRange,outputRange){var colorSpace=arguments.length>2&&arguments[2]!==undefined?arguments[2]:ColorSpace.RGB;return useSharedValue({inputRange:inputRange,outputRange:outputRange,colorSpace:colorSpace,cache:makeMutable(null)});}export var interpolateSharableColor=function interpolateSharableColor(value,interpolateConfig){'worklet';var colors=interpolateConfig.value.cache.value;if(interpolateConfig.value.colorSpace===ColorSpace.RGB){if(!colors){colors=getInterpolateRGB(interpolateConfig.value.outputRange);interpolateConfig.value.cache.value=colors;}return interpolateColorsRGB(value,interpolateConfig.value.inputRange,colors);}else if(interpolateConfig.value.colorSpace===ColorSpace.HSV){if(!colors){colors=getInterpolateHSV(interpolateConfig.value.outputRange);interpolateConfig.value.cache.value=colors;}return interpolateColorsHSV(value,interpolateConfig.value.inputRange,colors);}throw new Error(\"Invalid color space provided: \"+interpolateConfig.value.colorSpace+\". Supported values are: ['RGB', 'HSV']\");};","map":{"version":3,"sources":["C:/Users/miche/Desktop/hwangskitchen/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js"],"names":["hsvToColor","RGBtoHSV","rgbaColor","processColor","red","green","blue","opacity","makeMutable","interpolate","Extrapolate","useSharedValue","interpolateColorsHSV","value","inputRange","colors","h","CLAMP","s","v","interpolateColorsRGB","r","g","b","a","getInterpolateRGB","i","length","color","proocessedColor","undefined","push","getInterpolateHSV","interpolateColor","outputRange","colorSpace","Error","ColorSpace","useInterpolateConfig","RGB","cache","interpolateSharableColor","interpolateConfig","HSV"],"mappings":"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","sourcesContent":["import { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity, } from './Colors';\nimport { makeMutable } from './core';\nimport { interpolate } from './interpolation';\n// @ts-ignore JS file\nimport { Extrapolate } from '../reanimated1/derived';\nimport { useSharedValue } from './hook/useSharedValue';\nconst interpolateColorsHSV = (value, inputRange, colors) => {\n    'worklet';\n    const h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n    const s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n    const v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n    return hsvToColor(h, s, v);\n};\nconst interpolateColorsRGB = (value, inputRange, colors) => {\n    'worklet';\n    const r = interpolate(value, inputRange, colors.r, Extrapolate.CLAMP);\n    const g = interpolate(value, inputRange, colors.g, Extrapolate.CLAMP);\n    const b = interpolate(value, inputRange, colors.b, Extrapolate.CLAMP);\n    const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n    return rgbaColor(r, g, b, a);\n};\nconst getInterpolateRGB = (colors) => {\n    'worklet';\n    const r = [];\n    const g = [];\n    const b = [];\n    const a = [];\n    for (let i = 0; i < colors.length; ++i) {\n        const color = colors[i];\n        const proocessedColor = processColor(color);\n        // explicit check in case if processedColor is 0\n        if (proocessedColor !== null && proocessedColor !== undefined) {\n            r.push(red(proocessedColor));\n            g.push(green(proocessedColor));\n            b.push(blue(proocessedColor));\n            a.push(opacity(proocessedColor));\n        }\n    }\n    return { r, g, b, a };\n};\nconst getInterpolateHSV = (colors) => {\n    'worklet';\n    const h = [];\n    const s = [];\n    const v = [];\n    for (let i = 0; i < colors.length; ++i) {\n        const color = colors[i];\n        const proocessedColor = RGBtoHSV(processColor(color));\n        if (proocessedColor) {\n            h.push(proocessedColor.h);\n            s.push(proocessedColor.s);\n            v.push(proocessedColor.v);\n        }\n    }\n    return { h, s, v };\n};\nexport const interpolateColor = (value, inputRange, outputRange, colorSpace = 'RGB') => {\n    'worklet';\n    if (colorSpace === 'HSV') {\n        return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange));\n    }\n    else if (colorSpace === 'RGB') {\n        return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange));\n    }\n    throw new Error(`Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`);\n};\nexport var ColorSpace;\n(function (ColorSpace) {\n    ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n    ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n})(ColorSpace || (ColorSpace = {}));\nexport function useInterpolateConfig(inputRange, outputRange, colorSpace = ColorSpace.RGB) {\n    return useSharedValue({\n        inputRange,\n        outputRange,\n        colorSpace,\n        cache: makeMutable(null),\n    });\n}\nexport const interpolateSharableColor = (value, interpolateConfig) => {\n    'worklet';\n    let colors = interpolateConfig.value.cache.value;\n    if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n        if (!colors) {\n            colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n            interpolateConfig.value.cache.value = colors;\n        }\n        return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors);\n    }\n    else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n        if (!colors) {\n            colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n            interpolateConfig.value.cache.value = colors;\n        }\n        return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors);\n    }\n    throw new Error(`Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`);\n};\n"]},"metadata":{},"sourceType":"module"}